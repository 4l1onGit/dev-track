// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // DevTracker Fields 
  theme       String? // e.g. "light", "dark"
  lastActive  DateTime? // for streak tracking
  streakStart DateTime? // optional start point
  skills      Skill[]
  notes       Note[]
  projects    Project[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Dev Tracker tables

model ProjectSkill {
  id        String  @id @default(uuid())
  skill     Skill   @relation(fields: [skillId], references: [id])
  skillId   String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}

model Project {
  id           String         @id @default(uuid())
  title        String
  description  String?
  status       String // "In Progress", "Completed"
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  linkedSkills ProjectSkill[]
}

model Note {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  tags      String[] @default([])
  skill     Skill?   @relation(fields: [skillId], references: [id])
  skillId   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Skill {
  id                 String         @id @default(uuid())
  name               String
  description        String?
  progress           Int // 0â€“100 scale
  confidence         Confidence // e.g. "Low", "Medium", "High"
  skillLevel         SkillLevel // "Beginner", "Intermediate", "Advanced"
  category           Category // "Frontend", "Backend", etc.
  tags               String[]       @default([])
  createdAt          DateTime       @default(now())
  lastUpdated        DateTime       @updatedAt
  user               User           @relation(fields: [userId], references: [id])
  userId             String
  associatedProjects ProjectSkill[]
  Note               Note[]
}

enum Confidence {
  Low
  Medium
  High
}

enum SkillLevel {
  Beginner
  Intermediate
  Advanced
}

enum Category {
  Frontend
  Backend
  DevOps
  Mobile
  Tooling
  SoftSkill
  Other
}
